{"version":3,"sources":["utils/index.js","components/Options.js","components/Remark.js","components/CountTimer.js","components/Result.js","components/Question.js","components/Home.js","App.js","index.js"],"names":["actionTypes","initialState","newRound","questionNumber","gameStatus","answerIsCorrect","undefined","timeLeft","reducer","state","action","type","payload","randomNumber","maxLength","Math","floor","random","shuffleQuestions","externalArray","array","triviaQuestions","randomArray","i","push","length","Array","from","Set","slice","Options","allOptions","correctOption","dispatch","setShowResult","showResult","shuffleOptions","useMemo","className","map","option","index","key","onClick","result","submitAnswer","disabled","Remark","randomNum","role","version","viewBox","xmlns","d","fill","transform","remarks","correct","incorrect","isResultPage","CountTimer","startTimer","useCallback","setTimeout","useEffect","strokeLinecap","strokeWidth","cx","cy","r","stroke","strokeDasharray","Result","Question","useState","selectedQuestion","incorrectOptions","correctOptions","concat","width","height","rx","ry","question","Home","rulesRead","setRulesRead","showAlert","setShowAlert","htmlFor","id","value","App","useReducer","render","document","querySelector"],"mappings":"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","file":"static/js/main.e4be30ec.chunk.js","sourcesContent":["import triviaQuestions from \"../assets/trivia_questions.json\";\r\n\r\nexport const actionTypes = {\r\n    START_GAME: \"START_GAME\",\r\n    REPLAY_GAME: \"REPLAY_GAME\",\r\n    NEXT_QUESTION: \"NEXT_QUESTION\",\r\n    SELECT_ANSWER: \"SELECT_ANSWER\",\r\n    RUN_TIMER: \"RUN_TIMER\",\r\n    SHOW_RESULT: \"SHOW_RESULT\"\r\n};\r\n\r\nexport const initialState = { \r\n    newRound: [], \r\n    questionNumber: 1, \r\n    gameStatus: \"idle\",\r\n    answerIsCorrect: undefined,\r\n    timeLeft: 10\r\n};\r\n\r\nexport const reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.START_GAME:\r\n            return {\r\n                ...state,\r\n                newRound: action.payload,\r\n                gameStatus: \"ongoing\"\r\n            }\r\n        case actionTypes.REPLAY_GAME: \r\n            return {\r\n                ...state,\r\n                ...initialState,\r\n                newRound: action.payload,\r\n                gameStatus: \"idle\"\r\n            }\r\n        case actionTypes.NEXT_QUESTION:\r\n            return {\r\n                ...state,\r\n                questionNumber: action.payload,\r\n                answerIsCorrect: undefined,\r\n                timeLeft: 10\r\n            }\r\n        case actionTypes.SELECT_ANSWER:\r\n            return {\r\n                ...state,\r\n                answerIsCorrect: action.payload,\r\n            }\r\n        case actionTypes.RUN_TIMER: {\r\n            return {\r\n                ...state,\r\n                timeLeft: state.timeLeft - 2\r\n            }\r\n        }\r\n        case actionTypes.SHOW_RESULT: {\r\n            return {\r\n                ...state,\r\n                gameStatus: \"result\"\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport const randomNumber = (maxLength) => (Math.floor(Math.random() * maxLength));\r\n\r\nexport const shuffleQuestions = (externalArray) => {\r\n    let array = externalArray ? externalArray: triviaQuestions;\r\n    let randomArray = [];\r\n\r\n    for (let i = 0; i <= 30; i++) {\r\n        randomArray.push(array[randomNumber(array.length)])\r\n    }\r\n\r\n    let set = Array.from(\r\n        new Set(randomArray)\r\n    ).slice(0, 10);\r\n\r\n    return set;\r\n};","import React, { useMemo } from \"react\";\r\nimport { actionTypes, shuffleQuestions } from \"../utils\";\r\n\r\nexport const Options = ({\r\n    allOptions,\r\n    correctOption,\r\n    answerIsCorrect,\r\n    dispatch,\r\n    setShowResult,\r\n    showResult,\r\n    timeLeft }\r\n) => {\r\n    const submitAnswer = option => {\r\n        if (option === correctOption) {\r\n            dispatch({ type: actionTypes.SELECT_ANSWER, payload: true });\r\n            setShowResult({...showResult, result: showResult.result + 1})\r\n        } else {\r\n            dispatch({ type: actionTypes.SELECT_ANSWER, payload: false });\r\n        }\r\n    }\r\n\r\n    let shuffleOptions = useMemo(() => shuffleQuestions(allOptions), [allOptions]);\r\n\r\n    return (\r\n        <div className={`options`}>\r\n            {shuffleOptions.map((option, index) =>\r\n                <button\r\n                    key={option}\r\n                    onClick={() => submitAnswer(option)}\r\n                    className={answerIsCorrect && option === correctOption ? \"options__correct\" : \"\"}\r\n                    disabled={timeLeft < 1}>\r\n                    <span>{option}</span>\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n};","import React, {useMemo} from \"react\";\r\nimport { actionTypes, randomNumber as randomNumber } from \"../utils\";\r\n\r\nexport const Remark = ({\r\n    dispatch,\r\n    gameStatus,\r\n    questionNumber,\r\n    answerIsCorrect,\r\n    correctOption,\r\n    setShowResult,\r\n    showResult }\r\n\r\n) => {\r\n\r\n    const randomNum = useMemo(() => randomNumber(4), [correctOption]);\r\n\r\n    const nextQuestion = () => {\r\n        if (gameStatus !== \"idle\" && questionNumber < 10) {\r\n            dispatch({\r\n                type: actionTypes.NEXT_QUESTION,\r\n                payload: questionNumber + 1\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleShowResult = () => {\r\n        setShowResult({\r\n            ...showResult,\r\n            isResultPage: true\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={`remark ${answerIsCorrect === undefined ? \"remark__hidden\" : \"\"}`}>\r\n            <svg role=\"\" version=\"1.1\" viewBox=\"0 0 91.714 61.373\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"m17.708 45.605 9.2181 5.5794-25.471 9.4607 15.768-8.7329z\" fill=\"#fff\" />\r\n                <g transform=\"matrix(.92162 0 0 .91569 -2.9371 -10.988)\" fill=\"#fff\">\r\n                    <path d=\"m8.552 32.501c1.9338-4.4356 5.3737-8.1111 9.377-10.829 4.0033-2.7182 8.5601-4.5292 13.206-5.881 17.821-5.1847 37.796-3.5443 53.886 5.7052 4.1676 2.3957 8.1674 5.3903 10.592 9.541 1.7457 2.9885 2.5898 6.472 2.5683 9.933-0.02146 3.4609-0.89274 6.8958-2.3761 10.023-2.9667 6.2541-8.2792 11.154-14.184 14.766-13.29 8.1283-29.947 10.159-45.071 6.4243-8.962-2.2131-17.68-6.5583-23.486-13.735-2.9029-3.5884-5.0211-7.8449-5.8922-12.378-0.87117-4.5327-0.46476-9.3383 1.3798-13.569z\" fill=\"#fff\" />\r\n                </g>\r\n            </svg>\r\n\r\n            <div className=\"remark__comments imposter\">\r\n                <p>\r\n                    {\r\n                        answerIsCorrect ?\r\n                            remarks.correct[randomNum] :\r\n                            `${remarks.incorrect[randomNum]}`\r\n                    }\r\n                </p>\r\n                {!answerIsCorrect && <p>The correct answer is <span className=\"color-tertiary-shade weight-bold\">{correctOption}</span></p>}\r\n                {answerIsCorrect && <p>Absolutely Correct!</p>}\r\n            </div>\r\n\r\n            {questionNumber < 10 ?\r\n                <button\r\n                    onClick={nextQuestion}>\r\n                    Next Question\r\n                </button> :\r\n                <button\r\n                    onClick={handleShowResult}>\r\n                    View Result\r\n                </button>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst remarks = {\r\n    correct: [\"You beautiful Genius!\", \"Einstein would be proud of you!\", \"You're almost smarter than me!\", \"You deserve an electronic kiss!\"],\r\n    incorrect: [\"I think I overestimated your IQ!\", \"How could you fail that!\", \"Shamefully Wrong!\", \"I knew this even without a brain\"]\r\n};","import React, { useEffect, useCallback } from \"react\";\r\nimport { actionTypes } from \"../utils\";\r\n\r\nexport const CountTimer = ({ \r\n    answerIsCorrect, \r\n    dispatch, \r\n    timeLeft \r\n}) => {\r\n\r\n    const fullTimeScale = 849.37;\r\n\r\n    const getTimeRatio = () => (timeLeft / 10) * fullTimeScale - 0.1;\r\n\r\n    const startTimer = useCallback(() => {\r\n        if (timeLeft !== 0 && answerIsCorrect === undefined) {\r\n            setTimeout(function start() {\r\n                dispatch({type: actionTypes.RUN_TIMER})\r\n            }, 2000);\r\n        } else return;\r\n    }, [dispatch, timeLeft, answerIsCorrect]);\r\n\r\n    useEffect(() => {\r\n        if (answerIsCorrect !== undefined) {\r\n            return;\r\n        } else if (timeLeft !== 0) {\r\n            startTimer();\r\n        } else {\r\n            dispatch({ type: actionTypes.SELECT_ANSWER, payload: false });\r\n        }\r\n    }, [timeLeft, startTimer, dispatch, answerIsCorrect]);\r\n\r\n    return (\r\n        <div className=\"timer\">\r\n            <svg version=\"1.1\" className=\"timer__svg\" viewBox=\"0 0 300 300\" xmlns=\"http://www.w3.org/2000/svg\" >\r\n                <g fill=\"#fff\" strokeLinecap=\"round\" strokeWidth=\"25\">\r\n                    <circle cx=\"149.72\" cy=\"153.06\" r=\"135.25\" stroke=\"rgb(9, 94, 67)\" />\r\n                    <path d=\"m284.97 153.06a135.25 135.25 0 0 1-135.25 135.25 135.25 135.25 0 0 1-135.25-135.25 135.25 135.25 0 0 1 135.25-135.25 135.25 135.25 0 0 1 135.25 135.25z\"\r\n                        stroke={timeLeft !== 0 ? \"#1af6b3ff\": \"#e31227fc\"} strokeDasharray={`${getTimeRatio()} ${fullTimeScale}`} />\r\n                </g>\r\n            </svg>\r\n            <span className={`timer__label | font-base ${timeLeft === 0 ? \"color-warning\": \"color-tertiary-shade\"}`}>\r\n                {timeLeft !== 0 ? timeLeft: \"Time Up!\"}\r\n            </span>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport { actionTypes, shuffleQuestions } from \"../utils\";\r\n\r\nexport const Result = ({ result, dispatch }) => {\r\n    const handleNewRound = () => {\r\n        dispatch({ type: actionTypes.REPLAY_GAME, payload: shuffleQuestions() })\r\n    }\r\n\r\n    return (\r\n        <div className=\"result center\">\r\n            <ul className=\"result__list\">\r\n                <h1>Your Score: {result}/10</h1>\r\n                <li>Incorrect: {`${10 - result}`}</li>\r\n                <li>Correct: {result}</li>\r\n            </ul>\r\n\r\n            <button onClick={handleNewRound}>New Round</button>\r\n        </div>\r\n    );\r\n};","import React, { useState } from \"react\";\r\nimport { Options } from \"./Options\";\r\nimport { Remark } from \"./Remark\";\r\nimport { CountTimer } from \"./CountTimer\";\r\nimport { Result } from \"./Result\";\r\n\r\nexport const Question = ({\r\n    newRound,\r\n    questionNumber,\r\n    gameStatus,\r\n    answerIsCorrect,\r\n    timeLeft,\r\n    dispatch\r\n}) => {\r\n    const [showResult, setShowResult] = useState({\r\n        result: 0,\r\n        isResultPage: false,\r\n    })\r\n\r\n    const selectedQuestion = newRound[questionNumber - 1];\r\n\r\n    const incorrectOptions = selectedQuestion.incorrect;\r\n\r\n    const correctOptions = selectedQuestion.correct;\r\n\r\n    const allOptions = incorrectOptions.concat(correctOptions);\r\n\r\n    return (\r\n        <>\r\n            {!showResult.isResultPage ?\r\n                <section className=\"question | flow\">\r\n                    <div className=\"question__header | splitter\">\r\n                        <h2 className=\"center\">{`Question ${questionNumber}/${newRound.length}`}</h2>\r\n                        <CountTimer\r\n                            answerIsCorrect={answerIsCorrect}\r\n                            timeLeft={timeLeft}\r\n                            dispatch={dispatch} />\r\n                    </div>\r\n\r\n                    <div className=\"question__main\">\r\n                        <svg width=\"366.86\" height=\"245.49\" version=\"1.1\" viewBox=\"0 0 91.714 61.373\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <g fill=\"#fff\">\r\n                                <g transform=\"matrix(.92162 0 0 .91569 -2.9371 -10.988)\">\r\n                                    <path d=\"m8.552 32.501c1.9338-4.4356 5.3737-8.1111 9.377-10.829 4.0033-2.7182 8.5601-4.5292 13.206-5.881 17.821-5.1847 37.796-3.5443 53.886 5.7052 4.1676 2.3957 8.1674 5.3903 10.592 9.541 1.7457 2.9885 2.5898 6.472 2.5683 9.933-0.02146 3.4609-0.89274 6.8958-2.3761 10.023-2.9667 6.2541-8.2792 11.154-14.184 14.766-13.29 8.1283-29.947 10.159-45.071 6.4243-8.962-2.2131-17.68-6.5583-23.486-13.735-2.9029-3.5884-5.0211-7.8449-5.8922-12.378-0.87117-4.5327-0.46476-9.3383 1.3798-13.569z\" fill=\"#fff\" />\r\n                                </g>\r\n                                <ellipse cx=\"76.883\" cy=\"52.245\" rx=\"5.2077\" ry=\"4.9838\" strokeLinecap=\"round\" strokeWidth=\"7.1216\" />\r\n                                <ellipse cx=\"84.947\" cy=\"58.405\" rx=\"3.4158\" ry=\"2.8559\" strokeLinecap=\"round\" strokeWidth=\"4.3661\" />\r\n                            </g>\r\n                        </svg>\r\n                        <p className=\"imposter | color-tertiary-shade\">{selectedQuestion.question}</p>\r\n                    </div>\r\n\r\n                    <Options\r\n                        allOptions={allOptions}\r\n                        correctOption={correctOptions}\r\n                        dispatch={dispatch}\r\n                        timeLeft={timeLeft}\r\n                        answerIsCorrect={answerIsCorrect}\r\n                        setShowResult={setShowResult}\r\n                        showResult={showResult}\r\n                    />\r\n\r\n                    <Remark\r\n                        dispatch={dispatch}\r\n                        gameStatus={gameStatus}\r\n                        questionNumber={questionNumber}\r\n                        answerIsCorrect={answerIsCorrect}\r\n                        correctOption={correctOptions}\r\n                        setShowResult={setShowResult}\r\n                        showResult={showResult}\r\n                    />\r\n                </section> :\r\n                <Result \r\n                    result={showResult.result} \r\n                    dispatch={dispatch}/>\r\n            }\r\n        </>\r\n    );\r\n};","import React, { useState } from \"react\";\r\nimport {\r\n    shuffleQuestions,\r\n    actionTypes\r\n} from \"../utils\";\r\n\r\nexport const Home = ({ dispatch }) => {\r\n    const [rulesRead, setRulesRead] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n\r\n    const handleBeginGame = () => {\r\n        if (!rulesRead) {\r\n            setShowAlert(true);\r\n\r\n            return;\r\n        }\r\n\r\n        dispatch({\r\n            type: actionTypes.START_GAME,\r\n            payload: shuffleQuestions()\r\n        })\r\n    };\r\n\r\n    const handleToggleCheckbox = () => {\r\n        setRulesRead(!rulesRead);\r\n        setShowAlert(false)\r\n    };\r\n\r\n    return (\r\n        <section className=\"home\">\r\n            <header>\r\n                <h1>Tandem Trivia</h1>\r\n            </header>\r\n\r\n            <div className=\"rules | gap-top-500\">\r\n                <h2>Game Rules</h2>\r\n                <div className=\"gap-top-400\">\r\n                    <ul className=\"rules__list | flow\">\r\n                        <li>A Round has Ten(10) Random questions.</li>\r\n                        <li>Each correct answer equals One(1) point.</li>\r\n                        <li>Each question has a Time Limit of Ten(seconds).</li>\r\n                        <li className=\"color-neutral\">!--Answers SHUFFLE randomly every two seconds, so be CAREFULL and QUICK when selecting--!</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"gap-top-500\">\r\n                <label htmlFor=\"rulesCheck\">\r\n                    <input\r\n                        id=\"rulesCheck\"\r\n                        type=\"checkbox\"\r\n                        value=\"rulesRead\"\r\n                        onClick={handleToggleCheckbox}\r\n                    />\r\n                    <span>I'm Ready!</span>\r\n                </label>\r\n            </div>\r\n\r\n            <button\r\n                className=\"center | gap-top-500\"\r\n                onClick={handleBeginGame}\r\n            >Start Game</button>\r\n\r\n            {showAlert && <p className=\"center\">Click the checkbox</p>}\r\n        </section>\r\n    );\r\n};","import React, { useReducer } from \"react\";\r\nimport \"./styles/index.scss\";\r\n\r\nimport {\r\n    reducer,\r\n    initialState\r\n} from \"./utils\";\r\n\r\nimport { Question } from \"./components/Question\";\r\nimport { Home } from \"./components/Home\";\r\n\r\nexport const App = () => {\r\n    const [state, dispatch] = useReducer(\r\n        reducer,\r\n        initialState\r\n    );\r\n\r\n    const { gameStatus } = state;\r\n\r\n    return (\r\n        <main>\r\n            {gameStatus === \"idle\" ?\r\n                <Home gameStatus={gameStatus} dispatch={dispatch} /> :\r\n                <Question {...state} dispatch={dispatch} />\r\n            }\r\n        </main>\r\n    );\r\n};","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { App } from \"./App\";\r\n\r\nrender(\r\n    <App />,\r\n    document.querySelector(\"#root\")\r\n);"],"sourceRoot":""}